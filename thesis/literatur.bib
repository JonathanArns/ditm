% Encoding: UTF-8
@article{debugging_distributed_systems_2016,
	author = {Beschastnikh, Ivan and Wang, Patty and Brun, Yuriy and Ernst,
	          Michael D.},
	title = {Debugging Distributed Systems},
	year = {2016},
	issue_date = {August 2016},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {59},
	number = {8},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/2909480},
	doi = {10.1145/2909480},
	abstract = {ShiViz is a new distributed system debugging visualization tool.
	            },
	journal = {Commun. ACM},
	month = jul,
	pages = {32–37},
	numpages = {6},
}

@article{why_is_random_testing_effective,
	author = {Majumdar, Rupak and Niksic, Filip},
	title = {Why is Random Testing Effective for Partition Tolerance Bugs?},
	year = {2017},
	issue_date = {January 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {2},
	number = {POPL},
	url = {https://doi.org/10.1145/3158134},
	doi = {10.1145/3158134},
	abstract = {Random testing has proven to be an effective way to catch bugs
	            in distributed systems in the presence of network partition
	            faults. This is surprising, as the space of potentially faulty
	            executions is enormous, and the bugs depend on a subtle interplay
	            between sequences of operations and faults. We provide a
	            theoretical justification of the effectiveness of random testing
	            in this context. First, we show a general construction, using the
	            probabilistic method from combinatorics, that shows that whenever
	            a random test covers a fixed coverage goal with sufficiently high
	            probability, a small randomly-chosen set of tests achieves full
	            coverage with high probability. In particular, we show that our
	            construction can give test sets exponentially smaller than
	            systematic enumeration. Second, based on an empirical study of
	            many bugs found by random testing in production distributed
	            systems, we introduce notions of test coverage relating to
	            network partition faults which are effective in finding bugs.
	            Finally, we show using combinatorial arguments that for these
	            notions of test coverage we introduce, we can find a lower bound
	            on the probability that a random test covers a given goal. Our
	            general construction then explains why random testing tools
	            achieve good coverage---and hence, find bugs---quickly. While we
	            formulate our results in terms of network partition faults, our
	            construction provides a step towards rigorous analysis of random
	            testing algorithms, and can be applicable in other scenarios.},
	journal = {Proc. ACM Program. Lang.},
	month = dec,
	articleno = {46},
	numpages = {24},
	keywords = {probabilistic method, distributed systems, network partition
	            faults, random testing},
}

@article{abstracting_the_geniuses,
	author = {Alvaro, Peter and Tymon, Severine},
	title = {Abstracting the Geniuses Away from Failure Testing},
	year = {2017},
	issue_date = {January 2018},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {61},
	number = {1},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/3152483},
	doi = {10.1145/3152483},
	abstract = {Ordinary users need tools that automate the selection of
	            custom-tailored faults to inject.},
	journal = {Commun. ACM},
	month = dec,
	pages = {54–61},
	numpages = {8},
}

@online{go_transport_docs,
	author = {Google},
	title = {Golang Standard Library Documentation: net/http},
	date = {2021-09-09},
	url = {https://pkg.go.dev/net/http#Transport},
	urldate = {2021-09-27},
}

@misc{go_retry_commit,
	author = {Gentry, Blake and Fitzpatrick, Brad},
	title = {net/http: retry idempotent HTTP reqs on dead reused conns},
	date = {2015-01-22},
	howpublished = {In: Golang VCS},
	publisher = {Google},
	url = {https://go-review.googlesource.com/c/go/+/3210/9//COMMIT_MSG#1},
	urldate = {2021-09-27},
}

@online{jepsen_analyses,
	author = {Kingsbury, Kyle},
	title = {Jepsen Analyses},
	date = {2017-02-16},
	url = {https://jepsen.io/analyses},
	urldate = {2021-09-29},
}

@inproceedings{analysis_of_network_partition_failures,
	author = {Ahmed Alquraan and Hatem Takruri and Mohammed Alfatafta and Samer
	          Al-Kiswany},
	title = {An Analysis of Network-Partitioning Failures in Cloud Systems},
	booktitle = {13th {USENIX} Symposium on Operating Systems Design and
	             Implementation ({OSDI} 18)},
	year = {2018},
	isbn = {978-1-939133-08-3},
	address = {Carlsbad, CA},
	pages = {51--68},
	url = {https://www.usenix.org/conference/osdi18/presentation/alquraan},
	publisher = {{USENIX} Association},
	month = oct,
}

@article{chaos_engineering,
	author = {Basiri, Ali and Behnam, Niosha and de Rooij, Ruud and Hochstein,
	          Lorin and Kosewski, Luke and Reynolds, Justin and Rosenthal, Casey},
	journal = {IEEE Software},
	title = {Chaos Engineering},
	year = {2016},
	volume = {33},
	number = {3},
	pages = {35-41},
	doi = {10.1109/MS.2016.60},
}

@inproceedings{distributed_replay_debugging_1997,
	author = {Neri, Daniel and Pautet, Laurent and Tardieu, Samuel},
	title = {Debugging Distributed Applications with Replay Capabilities},
	year = {1997},
	isbn = {0897919815},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/269629.269649},
	doi = {10.1145/269629.269649},
	booktitle = {Proceedings of the Conference on TRI-Ada '97},
	pages = {189–195},
	numpages = {7},
	location = {St. Louis, Missouri, USA},
	series = {TRI-Ada '97},
}

@mastersthesis{failify_masters_thesis,
  title={Towards a Library for Deterministic Failure Testing of Distributed Systems THESIS},
  author={Balalaie, Armin},
  year={2020},
  school={UNIVERSITY OF CALIFORNIA, IRVINE}
}
